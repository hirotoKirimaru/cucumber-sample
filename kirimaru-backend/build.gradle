plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id "org.sonarqube" version "2.7"
    id "jacoco" // JDK15とコンフリクト？

    id 'org.gradle.test-retry' version '1.1.9'
}

apply from: 'analysis.gradle'

//bootJar{
//    archiveFileName = 'kirimaru.jar'
//}
//bootJar {
//    enabled = false
//}
//
//jar {
//    enabled = true
//}

//sourceCompatibility = '17'
version '0.0.1'

// actuator infoに情報を載せる
springBoot {
    buildInfo()
}

// build時にymlファイルに追記する
// TODO: なぜかエラーになる
//processResources {
//    doLast {
//        file("build/resources/main/application.yml").append("info.version: 1.2.3")
//    }
//}

bootRun {
    // -Pprofiles=prdで起動できるようにする
    if (project.properties.containsKey("profiles")) {
        jvmArgs += '-Dspring.profiles.active=' + project.properties.get("profiles")
    }

    // 動的にversionを渡す
    args += '--version=' + version
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    cucumberRuntime {
        extendsFrom testImplementation
    }
}


dependencies {
    implementation project(':kirimaru-core')
    implementation project(':kirimaru-repository')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop' // aspect使いたい

    // Database
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // feature flag for java
//    compile 'org.ff4j:ff4j-core:1.8.1'
//    compile 'org.ff4j:ff4j-web:1.3.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // xmlunitで特定の項目を無視したければ、このライブラリを使う。
    testImplementation 'org.xmlunit:xmlunit-core:2.9.0'
    testImplementation 'org.xmlunit:xmlunit-placeholders:2.9.0'

    testImplementation 'com.codeborne:selenide:6.12.3'
    testImplementation 'io.cucumber:cucumber-java:7.11.1'
    testImplementation 'io.cucumber:cucumber-junit:7.11.1'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }

    // FTPサーバ
    implementation 'commons-net:commons-net:3.8.0'
    testImplementation 'org.mockftpserver:MockFtpServer:3.1.0'

    // rest-assured
//    testImplementation 'io.rest-assured:rest-assured:4.3.3'
//    testImplementation 'io.rest-assured:json-path:4.3.3'
    testImplementation 'io.rest-assured:xml-path:5.3.0'
    testImplementation 'io.rest-assured:spring-mock-mvc:5.3.0'

    // Wiremock Server
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'
    testImplementation "ru.lanwen.wiremock:wiremock-junit5:1.3.1"

    // WebClient
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // CSVMapper
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'

    // spring-cloud-starter-config
//    implementation 'org.springframework.cloud:spring-cloud-starter-config'
}

tasks.withType(Test) {
// 自分の環境だと逆に遅い
//    maxParallelForks = Runtime.runtime.availableProcessors()
//    forkEvery = 4
}

test {
    useJUnitPlatform()

//    retry {
//        // true だとBuild失敗。 falseだとBuild成功扱い。
//        failOnPassedAfterRetry = false
//        maxFailures = 10
//        maxRetries = 3
//    }

}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}
/**
 * cucumberを動かすタスク
 * @developing タグは無視する設定
 */
task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--tags', '~@developing', '--glue', 'features', 'src/test/resources']
        }
    }
}

/**
 * cucumberのタグ：@nowだけ動かすタスク
 * @developing タグは無視する
 */
task cucumberNow() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--tags', '@now', '--tags', '~@developing', '--glue', 'features', 'src/test/resources']
        }
    }
}
